# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger: none
#- main

variables:
- name: acr-serviceconnection
  value: acr-acconection
- name: imageRepository
  value: acr-ltimgenie-ad
- name: AzureServiceConnection
  value: aks-connection-ltimgenie
- name: RgName
  value: Dev-Rg
- name: Clustername
  value: azuredevops-aks

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  jobs:
  - job:

    steps:
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonarcloud-sc'
        organization: 'sonarcloud-azure123'
        scannerMode: 'Other'
        projectKey: sonarcloud-azure123_sonar-azure
        projectName: sonar-azure

    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.17'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: $(acr-serviceconnection)
        repository: $(imageRepository)
        tags: latest
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
    
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'manifests/'
        Contents: '**/*.yml'
        TargetFolder: '$(Pipeline.Workspace)/manifests'
        
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/manifests'
        artifact: 'manifest'
        publishLocation: 'pipeline'

- stage: Deploy  
  displayName: Deploy stage
  dependsOn: Build
  jobs:
    - deployment: Deploy
      displayName: Deploy job
      pool:
        vmImage: "ubuntu-latest"
      environment: 'dev' #customize with your environment
      strategy:
        runOnce:
          deploy:
            steps:             
              - task: KubernetesManifest@1
                displayName: Deploy to AKS
                inputs:
                    action: 'deploy'
                    connectionType: 'azureResourceManager'
                    azureSubscriptionConnection: '$(AzureServiceConnection)'
                    azureResourceGroup: '$(RgName)'
                    kubernetesCluster: '$(Clustername)'
                    #namespace: dev
                  
                    manifests: |
                      $(Pipeline.Workspace)/manifest/*.yml

